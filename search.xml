<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CPP 手动访问虚函数表</title>
      <link href="/2019/03/17/cppvirtual/"/>
      <url>/2019/03/17/cppvirtual/</url>
      
        <content type="html"><![CDATA[<h2 id="CPP-手动访问虚函数表"><a href="#CPP-手动访问虚函数表" class="headerlink" title="CPP 手动访问虚函数表"></a>CPP 手动访问虚函数表</h2><pre><code>class Object{public:    Object(){}    virtual void foo1()    {        printf(&quot;foo1--&gt;%d\n&quot;,0);    }    virtual void foo2()    {        printf(&quot;foo2--&gt;%d\n&quot;,1);    }};int main(int argc, char* argv[]){    typedef void (*fun)();    Object object;    fun foo1 = (fun)(*((int*)(*(int*)(&amp;object)) + 0));    foo1();    fun foo2 = (fun)(*((int*)(*(int*)(&amp;object)) + 1));    foo2();    Object* pObject = new Object();    fun foo3 = (fun)(*((int*)(*((int*)pObject)) + 0));    foo3();    fun foo4 = (fun)(*((int*)(*((int*)pObject)) + 1));    foo4();    fun foo5 = (fun)(*(*((int **)pObject) + 0));    foo5();    fun foo6 = (fun)(*(*((int **)pObject) + 1));    foo6();    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 函数指针 </tag>
            
            <tag> 虚函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑门电路实现加减乘除运算器</title>
      <link href="/2019/03/16/yi-huo-yu-shi-xian-jia-jian-cheng-chu/"/>
      <url>/2019/03/16/yi-huo-yu-shi-xian-jia-jian-cheng-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="逻辑门电路实现加减乘除运算器"><a href="#逻辑门电路实现加减乘除运算器" class="headerlink" title="逻辑门电路实现加减乘除运算器"></a>逻辑门电路实现加减乘除运算器</h2><pre><code>#include &lt;stdio.h&gt;int add(int arg1, int arg2);int sub(int arg1, int arg2);int mul(int arg1, int arg2);int div(int arg1, int arg2);/** * 加法器 * desc:使用亦或实现加法，使用按位与实现进位检查 */ int add(int arg1, int arg2){    int x = arg1 ^ arg2;    int carry = arg1 &amp; arg2;    while(carry) {        carry &lt;&lt;= 1;        arg1 = x;        arg2 = carry;        x = arg1 ^ arg2;        carry = arg1 &amp; arg2;    }    return x;}/** * 减法器 * desc:减去一个数等于加上一个负数 */ int sub(int arg1, int arg2){    return add(arg1, mul(arg2, 0xFFFFFFFF));}/** * 乘法器 * desc:x * y 可表示为 x 个 y 相加 */ int mul(int arg1, int arg2){    int sum = arg2;    while(arg1 &gt; 1) {        sum = add(sum, arg2);        arg1 = sub(arg1, 1);    }    return sum;}/** * 除法器 * desc:x - y 可表示为x减去几个y=0 */ int div(int arg1, int arg2){    int sum = 0;    while(arg1) {        arg1 = sub(arg1, arg2);        sum = add(sum, 1);    }    return sum;}int main(int argc, char const *argv[]){    int res = add(100, -50);    printf(&quot;res = %d\n&quot;, res);    res = sub(100, 10);    printf(&quot;res = %d\n&quot;, res);    res = mul(3, 9);    printf(&quot;res = %d\n&quot;, res);    res = div(9, 3);    printf(&quot;res = %d\n&quot;, res);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
            <tag> 逻辑门电路实现加减乘除运算器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表翻转</title>
      <link href="/2019/03/15/lian-biao-fan-zhuan/"/>
      <url>/2019/03/15/lian-biao-fan-zhuan/</url>
      
        <content type="html"><![CDATA[<h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h2><h4 id="难度：简单"><a href="#难度：简单" class="headerlink" title="难度：简单"></a>难度：简单</h4><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>   反转一个单链表。</p><p>   实例：</p><pre><code>   输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL   输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</code></pre><p>解题思路：头插法</p><h5 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h5><pre><code>/** * Definition for singly-linked list. * struct ListNode { *     int val; *     struct ListNode *next; * }; */struct ListNode* reverseList(struct ListNode* head) {    if(!head) return head;    struct ListNode* p = head-&gt;next;    struct ListNode* tmp = NULL;    struct ListNode* newHead = head;    newHead-&gt;next = NULL;    while(p) {        tmp = p-&gt;next;        p-&gt;next = newHead;        newHead = p;        p = tmp;    }    return newHead;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 链表翻转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言数组越界返回地址覆盖反汇编分析</title>
      <link href="/2019/03/13/carrayoutofboundary/"/>
      <url>/2019/03/13/carrayoutofboundary/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言数组越界返回地址覆盖反汇编分析"><a href="#C语言数组越界返回地址覆盖反汇编分析" class="headerlink" title="C语言数组越界返回地址覆盖反汇编分析"></a>C语言数组越界返回地址覆盖反汇编分析</h1><pre><code>#include &lt;stdio.h&gt;void helloworld(){    printf(&quot;hello world\n&quot;);}// 返回地址覆盖void fun(){    int i;    int arr[5] = {0,1,2,3,4};    arr[6] = (int)helloworld;}// 数组越界void fun1(){    int i;    int a[5] = {1};    for(i=0; i &lt;= 5; i++)    {        a[i] = 4;        printf(&quot;i=%d\n&quot;, i);    }}int main(int argc, char const *argv[]){    fun1();    return 0;}</code></pre><p><img src="stackoverflow.png" alt="数组越界" title="数组越界"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 反汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现二叉搜索树</title>
      <link href="/2019/03/13/binarysearchtree/"/>
      <url>/2019/03/13/binarysearchtree/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define TYPE inttypedef struct BSTreeNode{    TYPE key;    struct BSTreeNode *parent; // 父节节点    struct BSTreeNode *left;   // 左孩子节点    struct BSTreeNode *right;  // 右孩子节点} Node, *BSTree;// 创建节点Node *createNode(TYPE key){    Node *node = (Node *)malloc(sizeof(Node));    node-&gt;key = key;    node-&gt;parent = NULL;    node-&gt;left = node-&gt;right = NULL;    return node;}// 插入节点void insertNode(BSTree *tree, Node *node){    BSTree p = *tree;    Node *parentNode = NULL;    // 查找插入节点    while (p)    {        parentNode = p;        if (node-&gt;key &lt; p-&gt;key)        {            p = p-&gt;left;        }        else        {            p = p-&gt;right;        }    }    // 没有找到即根节点为空    if (parentNode == NULL)    {        *tree = node;        return;    }    if (node-&gt;key &lt; parentNode-&gt;key)    {        // 插入左孩子        parentNode-&gt;left = node;    }    else    {        // 插入右孩子        parentNode-&gt;right = node;    }    node-&gt;parent = parentNode;}// 查找节点Node *searchNode(BSTree tree, TYPE key){    BSTree p = tree;    while (p &amp;&amp; p-&gt;key != key)    {        if (key &lt; p-&gt;key)        {            p = p-&gt;left;        }        else        {            p = p-&gt;right;        }    }    return p;}// 查找最小节点Node *findMinNode(BSTree tree){    BSTree p = tree;    while (p-&gt;left != NULL)    {        p = p-&gt;left;    }    return p;}// 查找最大节点Node *findMaxNode(BSTree tree){    BSTree p = tree;    while (p-&gt;right != NULL)    {        p = p-&gt;right;    }    return p;}// 删除节点void deleteNode(BSTree *tree, TYPE key){    BSTree p = *tree;    Node *node = searchNode(p, key);    // 节点不存在    if (!node)    {        return;    }    // 待删除节点左右孩子为空    if (!(node-&gt;left) &amp;&amp; !(node-&gt;right))    {        // 是父节点        if (node == *tree)        {            tree = NULL;            free(p);            return;        }        if (node == node-&gt;parent-&gt;left)        {            node-&gt;parent-&gt;left = NULL;        }        else        {            node-&gt;parent-&gt;right = NULL;        }        free(node);    }    // 左右孩子节点均不为空    else if (node-&gt;left &amp;&amp; node-&gt;right)    {        // 查找待删节点右子树最小节点        Node *minNode = findMinNode(node-&gt;right);        // 最小节点在父节点的左孩子        if (minNode == minNode-&gt;parent-&gt;left)        {            // 清空父子节点的右子树            minNode-&gt;parent-&gt;left = NULL;        }        else        {            // 清空父子节点的左子树            minNode-&gt;parent-&gt;right = NULL;        }        // 继承待删除节点的父节点，及左右子树        minNode-&gt;parent = node-&gt;parent;        minNode-&gt;left = node-&gt;left;        minNode-&gt;right = node-&gt;right;        // 是父节点        if (!(node-&gt;parent))        {            *tree = minNode;        }        else        {            if (node == node-&gt;parent-&gt;left)            {                node-&gt;parent-&gt;left = minNode;            }            else            {                node-&gt;parent-&gt;right = minNode;            }        }        free(node);    }    else    {        // 待删除节点左右子树有一个为空        // 保存孩子节点        Node *childNode = (node-&gt;left) ? (node-&gt;left) : (node-&gt;right);        // 待删节点是根节点        if (!(node-&gt;parent))        {            childNode-&gt;parent = NULL;            *tree = childNode;        }        else        {            childNode-&gt;parent = node-&gt;parent;            if (node == node-&gt;parent-&gt;left)            {                node-&gt;parent-&gt;left = childNode;            }            else            {                node-&gt;parent-&gt;right = childNode;            }        }        free(node);    }}void destroyTree(BSTree *tree){    if (tree == NULL)    {        return;    }    destroyTree(&amp;((*tree)-&gt;left));    destroyTree(&amp;((*tree)-&gt;right));    free((*tree));}//  先序遍历void DLR(BSTree tree){    if (tree == NULL)    {        return;    }    printf(&quot;%d  &quot;, tree-&gt;key);    DLR(tree-&gt;left);    DLR(tree-&gt;right);}// 中序遍历void LDR(BSTree tree){    if (tree == NULL)    {        return;    }    LDR(tree-&gt;left);    printf(&quot;%d  &quot;, tree-&gt;key);    LDR(tree-&gt;right);}// 后序遍历void LRD(BSTree tree){    if (tree == NULL)    {        return;    }    LRD(tree-&gt;left);    LRD(tree-&gt;right);    printf(&quot;%d  &quot;, tree-&gt;key);}int main(int argc, char const *argv[]){    BSTree tree = NULL;    TYPE value[8] = {10, 20, 30, 40, 5, 25, 15, 5};    Node *node = NULL;    for (int i = 0; i &lt; 8; i++)    {        node = createNode(value[i]);        insertNode(&amp;tree, node);    }    DLR(tree);    printf(&quot;\n&quot;);    LRD(tree);    printf(&quot;\n&quot;);    LDR(tree);    printf(&quot;\n&quot;);    deleteNode(&amp;tree, 30);    node = createNode(35);    insertNode(&amp;tree, node);    LDR(tree);    printf(&quot;\n&quot;);    destroyTree(&amp;tree);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现观察者模式</title>
      <link href="/2019/03/07/c-shi-xian-guan-cha-zhe-mo-shi/"/>
      <url>/2019/03/07/c-shi-xian-guan-cha-zhe-mo-shi/</url>
      
        <content type="html"><![CDATA[<pre><code>#include &lt;assert.h&gt;#include &lt;iostream&gt;#include &lt;set&gt;#include &lt;stdio.h&gt;using namespace std;class Observable;class Observer{public:  Observer() {}  virtual void update(Observable *observable, void *arg) = 0;private:  Observer(const Observer &amp;observer);  Observer &amp;operator=(const Observer &amp;observer);};class Observable{public:  virtual ~Observable()  {    delete instance;  }  void addObserver(Observer *observer);  void notifyObservers();  void notifyObservers(void *arg);  void setChanged(bool changed);  static Observable *getInstance();private:  Observable();protected:  void setUnChanged(bool unChanged);private:  static Observable *instance;  bool changed;  set&lt;Observer *&gt; observers;};Observable::Observable(){  this-&gt;changed = false;}void Observable::addObserver(Observer *observer){  assert(observer);  this-&gt;observers.insert(observer);}void Observable::setChanged(bool changed){  this-&gt;changed = changed;}void Observable::setUnChanged(bool unChanged){  this-&gt;changed = unChanged;}void Observable::notifyObservers(){  notifyObservers(NULL);}void Observable::notifyObservers(void *arg){  if (!changed)    return;  this-&gt;setUnChanged(!this-&gt;changed);  set&lt;Observer *&gt;::iterator it;  for (it = this-&gt;observers.begin(); it != this-&gt;observers.end(); it++)  {    Observer *obs = *it;    obs-&gt;update(this, arg);  }}Observable *Observable::instance = new Observable();Observable *Observable::getInstance(){  return Observable::instance;}class AObserver : public Observer{public:  void update(Observable *observable, void *arg)  {    printf(&quot;AObserver::  %d \n&quot;, *((int *)arg));  }};class BObserver : public Observer{public:  void update(Observable *observable, void *arg)  {    printf(&quot;BObserver::  %d \n&quot;, *((int *)arg));  }};int main(int argc, char const *argv[]){  cout &lt;&lt; &quot;-----------------------------\n&quot;;  Observable *observable = Observable::getInstance();  observable-&gt;setChanged(true);  AObserver *a = new AObserver();  BObserver *b = new BObserver();  observable-&gt;addObserver(a);  observable-&gt;addObserver(b);  int num = 2;  int *p = &amp;num;  observable-&gt;notifyObservers(p);  cout &lt;&lt; &quot;-----------------------------\n&quot;;  return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷宫求解</title>
      <link href="/2019/03/07/mi-gong-qiu-jie/"/>
      <url>/2019/03/07/mi-gong-qiu-jie/</url>
      
        <content type="html"><![CDATA[<pre><code>#include &lt;math.h&gt;#include &lt;stack&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;time.h&gt;#include &lt;windows.h&gt;#define MARTIX 10#define NO_ACCESS 0#define ACCESS 1#define ACCESSED -1using namespace std;int map[MARTIX][MARTIX] = {//   0  1  2  3  4  5  6  7  8  9    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 0    {0, 0, 1, 0, 1, 1, 1, 1, 1, 0}, // 1    {0, 1, 0, 0, 1, 0, 1, 0, 1, 0}, // 2    {0, 1, 1, 1, 1, 0, 0, 1, 1, 0}, // 3    {0, 1, 0, 0, 1, 1, 1, 1, 0, 0}, // 4    {0, 1, 1, 1, 0, 1, 0, 1, 1, 0}, // 5    {0, 1, 0, 1, 1, 1, 0, 0, 1, 0}, // 6    {0, 1, 0, 0, 0, 0, 0, 1, 1, 0}, // 7    {0, 1, 1, 1, 1, 1, 1, 1, 1, 0}, // 8    {0, 0, 0, 0, 0, 0, 0, 0, 1, 0}  // 9};enum Direct{    UP,    DOWN,    LEFT,    RIGHT};typedef struct _POS{    int x;    int y;} POS;struct Player{    int x;    int y;} player;stack&lt;POS&gt; his_pos_stack;void gotoxy(int x, int y){    COORD coord;    coord.X = (short)x;    coord.Y = (short)y;    HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);    //SetConsoleTextAttribute(handle,FOREGROUND_INTENSITY | BACKGROUND_BLUE);    SetConsoleTextAttribute(handle, BACKGROUND_INTENSITY | BACKGROUND_GREEN);    SetConsoleCursorPosition(handle, coord);}void gotoEnd(){    gotoxy(0, MARTIX + 1);}void InitMap(int (*agr)[10]){    int i, j;    for (i = 0; i &lt; 10; i++)    {        for (j = 0; j &lt; 10; j++)        {            gotoxy(j * 2, i);            if (agr[i][j] == 1)            {                printf(&quot;?&quot;);            }            else            {                printf(&quot;?&quot;);            }        }        printf(&quot;\n&quot;);    }}void drawPlayer(){    gotoxy(player.x * 2, player.y);    printf(&quot;?&quot;);    gotoEnd();}void SetPlayerPos(Player *mPlayer, int x, int y){    mPlayer-&gt;x = x;    mPlayer-&gt;y = y;}int GetPositionStatus(int (*args)[10], int x, int y){    return args[y][x];}void SetPositionStatus(int (*args)[10], int x, int y, int status){    args[y][x] = status;}void back(){    gotoxy(player.x * 2, player.y);    printf(&quot;?&quot;);    gotoEnd();    his_pos_stack.pop();    POS last_pos = his_pos_stack.top();    player.x = last_pos.x;    player.y = last_pos.y;    drawPlayer();}void go(int x, int y){    gotoxy(player.x * 2, player.y);    printf(&quot;?&quot;);    gotoEnd();    SetPositionStatus(map, x, y, ACCESSED);    SetPlayerPos(&amp;player, x, y);    drawPlayer();    POS new_pos;    new_pos.x = x;    new_pos.y = y;    his_pos_stack.push(new_pos);}void move(){    POS last_pos = his_pos_stack.top();    POS cur_pos[4];    int length = -1;    if (GetPositionStatus(map, last_pos.x, last_pos.y - 1) == ACCESS)    {        cur_pos[++length].x = last_pos.x;        cur_pos[length].y = last_pos.y - 1;    }    if (GetPositionStatus(map, last_pos.x, last_pos.y + 1) == ACCESS)    {        cur_pos[++length].x = last_pos.x;        cur_pos[length].y = last_pos.y + 1;    }    if (GetPositionStatus(map, last_pos.x - 1, last_pos.y) == ACCESS)    {        cur_pos[++length].x = last_pos.x - 1;        cur_pos[length].y = last_pos.y;    }    if (GetPositionStatus(map, last_pos.x + 1, last_pos.y) == ACCESS)    {        cur_pos[++length].x = last_pos.x + 1;        cur_pos[length].y = last_pos.y;    }    if (length &gt; -1)    {        int index = rand() % (length + 1);        go(cur_pos[index].x, cur_pos[index].y);    }    else    {        back();    }}void InitPos(int x, int y){    SetPlayerPos(&amp;player, x, y);    SetPositionStatus(map, x, y, ACCESSED);    POS init_pos;    init_pos.x = x;    init_pos.y = x;    his_pos_stack.push(init_pos);}void init(){    InitMap(map);    InitPos(1, 1);    drawPlayer();}int main(int argc, char const *argv[]){    srand((unsigned int)time(NULL));    init();    while (1)    {        Sleep(1000);        move();        if (player.x == 8 &amp;&amp; player.y == 9)        {            printf(&quot;winer\n&quot;);            break;        }    }    system(&quot;pause&quot;);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
            <tag> 迷宫求解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表达式求值</title>
      <link href="/2019/03/07/biao-da-shi-qiu-zhi/"/>
      <url>/2019/03/07/biao-da-shi-qiu-zhi/</url>
      
        <content type="html"><![CDATA[<pre><code>#include &lt;stack&gt;#include &lt;stdio.h&gt;#define MAX 0x7FFFFFFF#define MIN 0xFFFFFFFFusing namespace std;// 操作数栈stack&lt;int&gt; sOPND;// 操作符栈stack&lt;char&gt; sOPTR;// 操作符集合表char OPTR[] = {&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;, &#39;(&#39;, &#39;)&#39;, &#39;#&#39;, &#39;\0&#39;};// 操作符优先级表char PrecedeR[][7] = {    //+    -    *    /    (    )    #    {&#39;&gt;&#39;, &#39;&gt;&#39;, &#39;&lt;&#39;, &#39;&lt;&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;, &#39;&gt;&#39;},  // +    {&#39;&gt;&#39;, &#39;&gt;&#39;, &#39;&lt;&#39;, &#39;&lt;&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;, &#39;&gt;&#39;},  // -    {&#39;&gt;&#39;, &#39;&gt;&#39;, &#39;&gt;&#39;, &#39;&gt;&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;, &#39;&gt;&#39;},  // *    {&#39;&gt;&#39;, &#39;&gt;&#39;, &#39;&gt;&#39;, &#39;&gt;&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;, &#39;&gt;&#39;},  // /    {&#39;&lt;&#39;, &#39;&lt;&#39;, &#39;&lt;&#39;, &#39;&lt;&#39;, &#39;&lt;&#39;, &#39;=&#39;, &#39; &#39;},  // (    {&#39;&gt;&#39;, &#39;&gt;&#39;, &#39;&gt;&#39;, &#39;&gt;&#39;, &#39; &#39;, &#39;&gt;&#39;, &#39;&gt;&#39;},  // )    {&#39;&lt;&#39;, &#39;&lt;&#39;, &#39;&lt;&#39;, &#39;&lt;&#39;, &#39;&lt;&#39;, &#39; &#39;, &#39;=&#39;}}; // #// 判断是否在操作符集合 返回所在集合索引int IsInOP(char op){    int i;    for (i = 0; OPTR[i] != &#39;\0&#39;; ++i)    {        if (op == OPTR[i])        {            // 返回索引            return i;        }    }    return MIN;}// 判断两个操作符的优先级char Precede(char ch1, char ch2){    if (IsInOP(ch1) != -1 &amp;&amp; IsInOP(ch2) != -1)    {        return PrecedeR[IsInOP(ch1)][IsInOP(ch2)];    }    return &#39; &#39;;}// 判断是否是操作数int IsDigit(char ch){    if (ch &gt;= &#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;)    {        return 1;    }    return 0;}// 执行运算操作int Operate(char theta, int a, int b){    switch (theta)    {    case &#39;+&#39;:        return a + b;    case &#39;-&#39;:        return a - b;    case &#39;*&#39;:        return a * b;    case &#39;/&#39;:        return a / b;    default:        return MAX;    }}int calculator(const char *str){    int position = 0, num = 0;    sOPTR.push(&#39;#&#39;);    while (str[position] != &#39;#&#39; || sOPTR.top() != &#39;#&#39;)    {        char ch = str[position];        if (IsDigit(ch))        {            num = num * 10 + (ch - &#39;0&#39;);            position++;        }        else        {            if (num != 0)            {                // 是操作数则进操作数栈                sOPND.push(num);                // 清零                num = 0;            }            switch (Precede(sOPTR.top(), ch))            {            case &#39;&lt;&#39;:                // 期待符优先级高于操作符栈顶元素则期待符入栈，读头指向下一个期待符                sOPTR.push(ch);                position++;                break;            case &#39;&gt;&#39;:            {                // 期待符优先级低于操作符栈顶元素则操作符栈顶元素出栈                // 操作数栈弹出两个操作数 进行相应的算数符号运算并将运算结果压入操作数栈                int b = sOPND.top();                sOPND.pop();                int a = sOPND.top();                sOPND.pop();                sOPND.push(Operate(sOPTR.top(), a, b));                sOPTR.pop();                break;            }            case &#39;=&#39;:                // 期待符优先级等于操作符栈顶元素则操作符栈顶元素出栈，读头指向下一个期待符                sOPTR.pop();                position++;                break;            }        }    }    if (!sOPTR.empty())    {        return sOPND.top();    }    return MAX;}int main(int argc, char const *argv[]){    char str[80];    while (1)    {        printf(&quot;请输入算数表达式\n&quot;);        gets(str);        sprintf(str, &quot;%s%c&quot;, str, &#39;#&#39;);        int result = calculator(str);        printf(&quot;计算结果:%d\n&quot;, result);    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
            <tag> 表达式求值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建指南</title>
      <link href="/2019/03/07/hexo-da-jian-zhi-nan/"/>
      <url>/2019/03/07/hexo-da-jian-zhi-nan/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><pre><code>  yum -y install git  git config --global user.name &quot;ilixiaofu&quot;// github用户名  git config --global user.email  &quot;ilixiaofu@qq.com&quot;// github注册邮箱</code></pre></li><li><h2 id="安装NVM"><a href="#安装NVM" class="headerlink" title="安装NVM"></a>安装NVM</h2><pre><code>  git clone https://github.com/creationix/nvm.git  source nvm/nvm.sh</code></pre></li><li><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><pre><code>  nvm install stable  添加Node环境变量  vim /etc/profile  在底部添加 PATH 变量  export PATH=$PATH:/usr/local/node/bin  source /etc/profile</code></pre></li><li><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><pre><code>  npm install -g hexo-cli</code></pre></li><li><h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><pre><code>  hexo init &lt;文件名&gt;  hexo g == hexo generate       hexo d == hexo deploy  hexo s == hexo server  hexo n == hexo new  hexo clean</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
